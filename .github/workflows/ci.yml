name: CI
# Integrated core workflow:
# - Lint/Test across stable + MSRV (Ubuntu) and stable (macOS)
# - Cross-platform release builds (previously build.yml)
# - Minimal-versions sanity build (dependency resilience)
# - Lightweight summary
#
# Related specialized workflows:
# - dependency-health.yml handles audit/license/outdated (path-filtered + scheduled)
# - release.yml handles tagged packaging & GitHub Release publishing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    name: Lint & Test (${{ matrix.desc }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            toolchain: stable
            desc: stable-ubuntu
          - os: ubuntu-latest
            toolchain: 1.74.0
            desc: msrv-ubuntu
          - os: macos-latest
            toolchain: stable
            desc: stable-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy, rustfmt

      - name: Cache
        uses: swatinem/rust-cache@v2
        with:
          key: ci-${{ matrix.os }}-${{ matrix.toolchain }}

      - name: Format check
        run: cargo fmt --all --check

      - name: Clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build (debug)
        run: cargo build --all --all-features

      - name: Tests (debug)
        run: cargo test --all --all-features --no-fail-fast

      - name: Tests (release)
        run: cargo test --all --all-features --release --no-fail-fast

  cross-build:
    name: Cross Build Targets
    if: github.event_name != 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dws
            asset_name: dws-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dws
            asset_name: dws-aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dws
            asset_name: dws-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dws
            asset_name: dws-aarch64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache
        uses: swatinem/rust-cache@v2
        with:
          key: cross-${{ matrix.target }}

      - name: Install cross linker (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          mkdir -p .cargo
          {
            echo "[target.aarch64-unknown-linux-gnu]"
            echo 'linker = "aarch64-linux-gnu-gcc"'
          } >> .cargo/config.toml

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary
        if: runner.os != 'Windows'
        run: |
          STRIP="strip"
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            STRIP="aarch64-linux-gnu-strip"
          fi
          $STRIP target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          retention-days: 60

  minimal-versions:
    name: Minimal Versions Sanity
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: swatinem/rust-cache@v2
        with:
          key: minimal-versions

      - name: Resolve minimal versions
        run: cargo update -Z minimal-versions

      - name: Build with minimal versions
        run: cargo build --all --all-features

  summary:
    name: CI Summary
    needs: [lint-and-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Report
        run: |
          echo "Core CI complete."
          echo "Job results:"
          echo " - Lint & Test: ${{ needs.lint-and-test.result }}"
          if [ "${{ needs.lint-and-test.result }}" != "success" ]; then
            echo "::warning title=Lint/Test::Lint-and-test job did not succeed."
          fi
