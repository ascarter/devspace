name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short

permissions:
  contents: write

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dws
            asset_prefix: dws-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dws
            asset_prefix: dws-aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dws
            asset_prefix: dws-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dws
            asset_prefix: dws-aarch64-unknown-linux-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache
        uses: swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Install cross toolchain (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          mkdir -p .cargo
          {
            echo "[target.aarch64-unknown-linux-gnu]"
            echo 'linker = "aarch64-linux-gnu-gcc"'
          } >> .cargo/config.toml

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }} --locked --verbose

      - name: Strip binary
        if: runner.os != 'Windows'
        run: |
          STRIP="strip"
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            STRIP="aarch64-linux-gnu-strip"
          fi
          $STRIP target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Prepare package
        run: |
          set -euo pipefail
          BIN=target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          OUTDIR=pkg-${{ matrix.target }}
          mkdir -p "$OUTDIR"
            cp "$BIN" "$OUTDIR/"
          # Include license & readme for downstream compliance.
          cp LICENSE "$OUTDIR/"
          cp README.md "$OUTDIR/"
          tar -C "$OUTDIR" -czf ${{ matrix.asset_prefix }}.tar.gz .
          shasum -a 256 ${{ matrix.asset_prefix }}.tar.gz > ${{ matrix.asset_prefix }}.tar.gz.sha256

      - name: Upload artifacts (workflow)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_prefix }}
          path: |
            ${{ matrix.asset_prefix }}.tar.gz
            ${{ matrix.asset_prefix }}.tar.gz.sha256
          retention-days: 30

      - name: Publish GitHub Release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.asset_prefix }}.tar.gz
            ${{ matrix.asset_prefix }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
